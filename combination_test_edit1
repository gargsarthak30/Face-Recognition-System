from imutils.video import VideoStream
from imutils import face_utils
import datetime
import argparse
import imutils
import time
import numpy as np
import cv2
import dlib
from math import *
import ast
from Tkinter import *
from tkMessageBox import *

class combination:

                def narrowEyebrow(self):
                    x_dist = abs(self.shape.part(22).x - self.shape.part(21).x)
                    y_dist = abs(self.shape.part(22).y - self.shape.part(21).y)

                    dist1 = pow(x_dist,2) + pow(y_dist,2)
                    dist = sqrt(dist1)
                    self.featureDist.update({'eyeBrowNarrow' : dist})
                        

                def farEyebrow(self):
                    x_dist = abs(self.shape.part(26).x - self.shape.part(17).x)
                    y_dist = abs(self.shape.part(26).y - self.shape.part(17).y)

                    dist1 = pow(x_dist,2) + pow(y_dist,2)
                    dist = sqrt(dist1)
                    self.featureDist.update({'eyeBrowFar' : dist})

                def eyeHeight(self):
                    x_dist = abs(self.shape.part(43).x - self.shape.part(47).x)
                    y_dist = abs(self.shape.part(43).y - self.shape.part(47).y)

                    dist1 = pow(x_dist,2) + pow(y_dist,2)
                    dist = sqrt(dist1)
                    self.featureDist.update({'eyeHeight' : dist})

                def noseLength(self):
                    x_dist = abs(self.shape.part(27).x - self.shape.part(33).x)
                    y_dist = abs(self.shape.part(27).y - self.shape.part(33).y)

                    dist1 = pow(x_dist,2) + pow(y_dist,2)
                    dist = sqrt(dist1)
                    self.featureDist.update({'noseLength' : dist})
                    
                def noseWidth(self):
                    x_dist = abs(self.shape.part(35).x - self.shape.part(31).x)
                    y_dist = abs(self.shape.part(35).y - self.shape.part(31).y)

                    dist1 = pow(x_dist,2) + pow(y_dist,2)
                    dist = sqrt(dist1)
                    self.featureDist.update({'noseWidth' : dist})
                    
                def lipWidth(self):
                    x_dist = abs(self.shape.part(54).x - self.shape.part(48).x)
                    y_dist = abs(self.shape.part(54).y - self.shape.part(48).y)

                    dist1 = pow(x_dist,2) + pow(y_dist,2)
                    dist = sqrt(dist1)
                    self.featureDist.update({'lipWidth' : dist})

                def lipHeight(self):
                    x_dist = abs(self.shape.part(50).x - self.shape.part(58).x)
                    y_dist = abs(self.shape.part(50).y - self.shape.part(58).y)

                    dist1 = pow(x_dist,2) + pow(y_dist,2)
                    dist = sqrt(dist1)
                    self.featureDist.update({'lipHeight' : dist})

                def jawWidth(self):
                    x_dist = abs(self.shape.part(12).x - self.shape.part(4).x)
                    y_dist = abs(self.shape.part(12).y - self.shape.part(4).y)

                    dist1 = pow(x_dist,2) + pow(y_dist,2)
                    dist = sqrt(dist1)
                    self.featureDist.update({'jawWidth' : dist})

                def headWidth(self):
                    x_dist = abs(self.shape.part(15).x - self.shape.part(1).x)
                    y_dist = abs(self.shape.part(15).y - self.shape.part(1).y)

                    dist1 = pow(x_dist,2) + pow(y_dist,2)
                    dist = sqrt(dist1)
                    self.featureDist.update({'headWidth' : dist})
                    

                def execute(self, filename, dict_name):
                        detect = dlib.get_frontal_face_detector() 
                        predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")

                        vs = VideoStream(-1).start()
                        time.sleep(2.0)
                        self.featureDist = {}
                        
                        while 1:
                            frame = vs.read()
                            frame = imutils.resize(frame, width=400)
                            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                            clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
                            clahe_image = clahe.apply(gray)
                            faces = detect(clahe_image, 0)
                            for a,b in enumerate(faces):
                                self.shape = predictor(clahe_image, b)
                        
                                for i in range(1,68):
                                    cv2.circle(frame, ((self.shape.part(i).x), (self.shape.part(i).y)), 1, (0,0,255), thickness = 1)
                            
                                enter_key = cv2.waitKey(1) & 0xFF
                        
                                if (enter_key == 10):
                                    self.narrowEyebrow()
                                    self.farEyebrow()
                                    self.eyeHeight()
                                    self.noseLength()
                                    self.noseWidth()
                                    self.lipWidth()
                                    self.lipHeight()
                                    self.jawWidth()
                                    self.headWidth()

                                    self.final_dict = {}
                                    with open(filename + '.txt','r') as inf:
                                            self.final_dict = eval(inf.read())

                                    self.avg_dict={}
                                    self.avg_dict.update(ast.literal_eval(self.final_dict['avg']))

                                    summ=0
                                    result={}
                                    all_keys = set(self.avg_dict.keys() + self.featureDist.keys())
                                    for key in all_keys:
                                        if key in self.avg_dict and key in self.featureDist:
                                            v = abs(self.avg_dict[key] - self.featureDist[key])
                                            summ = summ+( 100 - v/100)
                                            result[key] = 100 - v/100

                                    print (result)
                                    summ = summ/len(result)
                                                                        
                                    enter_key = ord('q')
                                    showinfo("Accuracy Ratings", summ)
                                    mainloop()
                                    break
                                    
                            cv2.imshow("Frame",frame) 
                            if enter_key == ord('q'):
                                cv2.destroyAllWindows()
                                break
            
    
